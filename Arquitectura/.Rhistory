dogs<- datos$data
head(dogs)
# Mostrar los datos de la primera raza de perros
dogs[1,]
detach("package:RJSONIO", unload = TRUE)
library(dplyr)
################################################################################
## Ejemplo 1: Obtener Datos de una API                                        ##
################################################################################
library(httr)
library(jsonlite)
# ------------------------------------------------------------------------------
## Enlace de la API con datos de todas las razas de los perros
url = "https://dogapi.dog/api/v2/breeds"
# Conectarse a la API
res <- GET(url)
res
# Obtener información de la API
datos <- fromJSON(content(res, "text"))
# Guardar los datos de las razas de perros como una tabla (dataframe)
dogs<- datos$data
head(dogs)
# Mostrar los datos de la primera raza de perros
dogs[1,]
# Mostrar las razas de perros con esperanza de vida mínima menor a 13 años
dogs[dogs$attributes$life$min > 13,]$attributes$name
View(dogs)
id = "f9643a80-af1d-422a-9f15-18d466822053"
url = "https://dogapi.dog/api/v2/breeds"
res = GET(url, query = list(id= id))
res
raza_id = "f9643a80-af1d-422a-9f15-18d466822053"
url = "https://dogapi.dog/api/v2/breeds"
res2 = GET(url, query = list(id= raza_id))
breed_id = "f9643a80-af1d-422a-9f15-18d466822053"
res2 = GET(url, query = list(id= breed_id))
res2
# Obtener información de la API
datos2 <- fromJSON(content(res2, "text"))
# Guardar los datos de las razas de perros como una tabla (dataframe)
dog<- datos2$data
head(dog)
url = "https://dogapi.dog/api/v2/breeds"
# Conectarse a la API para una sola raza de perro
breed_id = "f9643a80-af1d-422a-9f15-18d466822053"
res2 = GET(url, query = list(id= breed_id))
res2
datos2 <- fromJSON(content(res2, "text"))
datos2
url
url + "{"
paste(url, "{")
var=201401
paste("http://stats.grok.se/json/en/",var,"/web_scraping")
paste("http://stats.grok.se/json/en/",var,"/web_scraping",sep="")
breed_id = "f9643a80-af1d-422a-9f15-18d466822053"
url2 = paste("https://dogapi.dog/api/v2/breeds/{",var,"}",sep="")
url2
url2 = paste("https://dogapi.dog/api/v2/breeds/{",breed_id,"}",sep="")
url2
breed_id = "f9643a80-af1d-422a-9f15-18d466822053"
url2 = paste("https://dogapi.dog/api/v2/breeds/{",breed_id,"}",sep="")
url2
res2 = GET(url, query = list(id= breed_id))
res2
res2 = GET(url2, query = list(id= breed_id))
res2
res2 = GET(url2)
res2
breed_id =  "68f47c5a-5115-47cd-9849-e45d3c378f12"
url2 = paste("https://dogapi.dog/api/v2/breeds/{",breed_id,"}",sep="")
# # Conectarse a la API para una sola raza de perro
# breed_id = "f9643a80-af1d-422a-9f15-18d466822053"
res2 = GET(url2)
res2
# Guardar los datos de las razas de perros como una tabla (dataframe)
dogs<- datos$data
# Obtener información de la API
datos2 <- fromJSON(content(res2, "text"))
# Guardar los datos de las razas de perros como una tabla (dataframe)
dog<- datos2$data
head(dog)
# Obtener información de la API
datos2 <- fromJSON(content(res2, "text"))
datos2$data
dog<- as.data.frame(datos2$data)
head(dog)
View(dog)
# ------------------------------------------------------------------------------
## Enlace de la API con datos de una raza de perro en particular
breed_id =  "68f47c5a-5115-47cd-9849-e45d3c378f12"
url2 = paste("https://dogapi.dog/api/v2/breeds/{",breed_id,"}",sep="")
res2 = GET(url2)
res2
# Obtener información de la API
datos2 <- fromJSON(content(res2, "text"))
# Guardar los datos de las razas de perros como una tabla (dataframe)
dog<- as.data.frame(datos2$data)
head(dog)
# Conectarse a una API con parámetros
res3 = GET(url,query = list(id = breed_id))
res$url
help(GET)
fromJSON(content(res3, "text"))
GET(url2,query = list(id = breed_id))
breed_id =  "68f47c5a-5115-47cd-9849-e45d3c378f12"
url2 = paste("https://dogapi.dog/api/v2/breeds/{",breed_id,"}",sep="")
res2 = GET(url2)
res2
# Obtener información de la API
datos2 <- fromJSON(content(res2, "text"))
# Guardar los datos de las razas de perros como una tabla (dataframe)
dog<- as.data.frame(datos2$data)
head(dog)
datos$links
next_url = datos$links$`next`
next_url
res_next = GET(next_url)
res_next
# Obtener los datos de la siguiente página
datos_next <- fromJSON(content(res_next, "text"))
datos_next
# Obtener los datos de la siguiente página
datos_next <- fromJSON(content(res_next, "text"))
# Guardar los datos de las razas de perros de la siguiente página
dogs_2<- datos_next$data
head(dogs_2)
url <- "web_simple.html"
res <- read_html(url)
res
res$node
res$node[1]
res[2]
url <- "web_simple.html"
site <- read_html(url)
site
html_form(Site)
html_form(site)
html_elements(site,"h1")
html_elements(site,"p")
site <- read_html(url,encoding = UTF8)
help("read_html")
site <- read_html(url,encoding =  "UTF8")
html_elements(site,"h1")
url <- "web_simple.html"
page <- read_html(url,encoding =  "UTF8")
html_elements(page,"h1")
url <- "web_simple.html"
page <- read_html(url,encoding =  "UTF-8")
html_elements(page,"h1")
html_elements(page,"p")
url <- "web_simple.html"
pagina <- read_html(url,encoding =  "UTF-8")
url <- "web_simple.html"
contenido <- read_html(url,encoding =  "UTF-8")
contenido
print(contenido)
help(rvest)
# Encontrar el primer tag <h1> en el archivo HTML e imprimir su texto
html_elements(page,"h1")
# Encontrar el primer tag <h1> en el archivo HTML e imprimir su texto
contenido %>% html_elements("h1")
# Encontrar el primer tag <h1> en el archivo HTML e imprimir su texto
contenido %>% html_elements(css = "h1")
resultado1 <- contenido %>%
html_elements(css = "h1") %>%
html_text()
resultado1
html_elements(css = "h1")
contenido %>%
html_elements(css = "h1")
resultado1 <- contenido %>%
html_elements(css = "h1")[1] %>%
html_text()
# Encontrar el primer tag <h1> en el archivo HTML e imprimir su texto
resultado1 <- contenido %>%
html_elements(css = "h1") %>%
html_text()[1]
contenido %>%
html_elements(css = "h1")
resultado1 <- contenido %>%
html_elements(css = "h1")
resultado1
resultado1[1]
contenido %>%
html_elements(css = "h1")[1] %>%
html_text()
contenido %>%
html_elements(css = "h1") %>%
html_text()
contenido %>%
html_elements(css = "h1") %>%
html_text2()
help("html_text")
resultado1 <- contenido %>%
html_elements(css = "p") %>%
html_text2()
resultado1
resultado1[1]
resultado1 <- contenido %>%
html_elements(css = "p") %>%
html_text(summaries_css)
resultado1 <- contenido %>%
html_elements(css = "p") %>%
html_text()
resultado1
resultado1 <- contenido %>%
html_elements(css = "p") %>%
html_text2()
resultado1
resultado1 <- contenido %>%
html_elements(css = "p") %>%
html_text2()
resultado1[1]
contenido %>%
html_element(css = "p") %>%
html_text2()
contenido %>%
html_elements(css = "p") %>%
html_text2()
contenido %>%
html_element(css = "p") %>%
html_text2()
resultado1 <- contenido %>%
html_element(css = "H1") %>%
html_text2()
resultado1
resultado1 <- contenido %>%
html_element(css = "h1") %>%
html_text2()
resultado1
contenido
class(contenido)
resultado2 <- contenido %>%
html_elements(css = "li") %>%
html_text()
resultado2
resultado2 <- contenido %>%
html_elements(css = "li") %>%
html_text2()
resultado2
resultado2 <- contenido %>%
html_elements(css = "li") %>%
html_text() %>%
cat()
resultado2
resultado2
resultado2 <- contenido %>%
html_elements(css = "li") %>%
html_text() %>%
cat()
resultado2
help(cat)
resultado2 <- contenido %>%
html_elements(css = "li") %>%
html_text()
resultado2
resultado3 <- contenido %>%
html_element(css = "a") %>%
html_text()
resultado2
resultado3 <- contenido %>%
html_element(css = "a") %>%
html_text()
resultado3
resultado3 <- contenido %>%
html_element(css = "a") %>%
html_text2()
resultado3
resultado3 <- contenido %>%
html_element(css = "a") %>%
html_attr("src") %>%
html_text2()
resultado3 <- contenido %>%
html_element(css = "a") %>%
html_attr("src")
resultado3
resultado3 <- contenido %>%
html_element(css = "a") %>%
html_attr("href")
resultado3
contenido %>%
html_element(css = "a") %>%
html_attr("href") %>%
html_text()
resultado3 <- contenido %>%
html_element(css = "a") %>%
html_attr("href")
resultado3
resultado4 <- contenido %>%
html_elements("#fecha")
resultado4
resultado4 <- contenido %>%
html_elements("#fecha") %>%
html_text2()
resultado4
# Encontrar todos los tags <li> en el archivo HTML
resultado2 <- contenido %>%
html_elements(css = "li") %>%
html_text()
resultado2
# Encontrar el primer tag <a> en el archivo HTML e imprimir el atributo href
resultado3 <- contenido %>%
html_element(css = "a") %>%
html_attr("href")
resultado3
resultado4 <- contenido %>%
html_elements("#fecha") %>%
html_text2()
resultado4
resultado5 <- contenido %>%
html_element(".precipitaciones") %>%
html_text2()
resultado5
resultado5 <- contenido %>%
html_element(".precipitaciones") %>%
html_text2()
resultado5
help("html_elements")
resultado5 <- contenido %>%
html_elements(".precipitaciones") %>%
html_text2()
resultado5
resultado6 <- contenido %>%
html_elements(css ="li") %>%
html_text2()
resultado6
resultado6 <- contenido %>%
html_elements(css = c("li",".precipitaciones")) %>%
html_text2()
resultado6
# Encontrar el tag <li> con clase "precipitaciones" en el archivo HTML
resultado6 <- contenido %>%
html_elements(css = c("li .precipitaciones")) %>%
html_text2()
resultado6
# Encontrar el tag <li> con clase "precipitaciones" en el archivo HTML
resultado6 <- contenido %>%
html_elements(css = "li .precipitaciones") %>%
html_text2()
resultado6
# Encontrar el tag <li> con clase "precipitaciones" en el archivo HTML
resultado6 <- contenido %>%
html_elements(css = "li") %>%
html_text2()
resultado6
resultado6 <- contenido %>%
html_elements(css = "li") %>%
html_elements(css =".precipitaciones") %>%
html_text2()
resultado6
# Encontrar el tag <li> con clase "precipitaciones" en el archivo HTML
resultado6 <- contenido %>%
html_elements(css = "li") %>%
html_elements(css =".precipitaciones") %>%
html_text2()
resultado6
contenido %>%
html_elements(css = "li")
contenido %>%
html_elements(css = "li") %>%
html_elements(css =".precipitaciones")
contenido %>%
html_element(css =".precipitaciones")
contenido %>%
html_node(css = "li")
contenido %>%
html_nodes(css = "li")
contenido %>%
html_nodes(css = "li") %>%
html_elements(css =".precipitaciones")
contenido %>%
html_element(css =".precipitaciones")
contenido %>%
html_elements(css = "li")
contenido %>%
html_elements(css = "li") %>%
html_elements(css =".precipitaciones")
contenido %>%
html_elements(css = "li .precipitaciones")
contenido %>%
html_elements(css = "li > .precipitaciones")
contenido %>%
html_elements(css = " .precipitaciones")
contenido %>%
html_element(css ="li.precipitaciones")
resultado6 <- contenido %>%
html_elements(css = "li.precipitaciones")
html_text2()
contenido %>%
html_elements(css = "li.precipitaciones")
resultado6 <- contenido %>%
html_elements(css = "li.precipitaciones") %>%
html_text2()
resultado6
contenido %>%
html_node(css ="#intro")
contenido %>%
html_node(css ="#parrafo"
)
resultado7 <- contenido %>%
html_node(css =".parrafo")
contenido %>%
html_node(css =".parrafo")
contenido %>%
html_nodes(css =".parrafo")
contenido %>%
html_elements(css =".parrafo")
resultado7 <- contenido %>%
html_node(css ="body") %>%
html_text2()
resultado7
resultado7 <- contenido %>%
html_elements(css ="body") %>%
html_text2()
resultado7
drivers_F1 <- page %>%
html_element("table.sortable") %>%
html_table()
link <- "https://en.wikipedia.org/wiki/List_of_Formula_One_drivers"
page <- read_html(link)
drivers_F1 <- page %>%
html_element("table.sortable") %>%
html_table()
drivers_F1
head(drivers_F1)
link = "https://www.imdb.com/search/title/?title_type=feature&num_votes=25000&genres=adventure"
page = read_html(link)
link = "https://www.imdb.com/search/title/?genres=horror&sort=num_votes,desc&view=advanced"
page = read_html(link)
titles <- page %>%
html_nodes(".lister-item-header a")%>%
html_text()
titles
title <- page %>%
html_nodes(".lister-item-header a")%>%
html_text()
title
year<- page %>%
html_nodes(".text-muted.unbold")%>%
html_text()
year
link <- "https://www.imdb.com/search/title/?title_type=feature&genres=horror&sort=num_votes,desc&explore=genres"
page <- read_html(link)
title <- page %>%
html_nodes(".lister-item-header a")%>%
html_text()
title
# Obtenemos los años de las películas de terror
year<- page %>%
html_nodes(".text-muted.unbold")%>%
html_text()
year
page %>%
html_nodes(".text-muted unbold")%>%
html_text()
page %>%
html_nodes(".text-muted.unbold")%>%
html_text()
year<- page %>%
html_nodes(".text-muted.unbold")%>%
html_text()
year
rating<- page %>%
html_nodes(".ratings-imdb-rating strong")%>%
html_text()
rating
page %>%
html_nodes(".ratings-bar .text-muted")%>%
# Obtenemos las calificaciones de las películas de terror
rating<- page %>%
html_nodes(".ratings-bar .text-muted")%>%
html_text()
page %>%
html_nodes(".ratings-bar .text-muted")%>%
html_text()
rating<- page %>%
html_nodes(".ratings-bar + .text-muted")%>%
html_text()
rating
rating<- page %>%
html_nodes(".ratings-bar + .text-muted")%>%
html_text2()
rating
# Obtenemos los años de las películas de terror
rating<- page %>%
html_nodes(".ratings-imdb-rating strong")%>%
html_text()
rating
# Obtenemos las calificaciones de las películas de terror
synopsis<- page %>%
html_nodes(".ratings-bar + .text-muted")%>%
html_text2()
synopsis
# Creamos un dataframe con los datos extraidos
movies = data.frame(titles, year, rating, synopsis, stringsAsFactors = FALSE)
# Creamos un dataframe con los datos extraidos
movies = data.frame(titles, year, rating, synopsis, stringsAsFactors = FALSE)
# Creamos un dataframe con los datos extraidos
movies = data.frame(titles, year, rating, synopsis, stringsAsFactors = FALSE)
head(movies)
view(movies)
view(drivers_F1)
quarto use template numbats/monash-quarto-memo
remotes::install_github("Pecners/quartotemplate")
library(quartotemplate)
help(quartotemplate)
exp(0.4772)
setwd("C:/Documentos/Dropbox/Cursos/Pacifico/Investigación de Mercados Aplicada/Presentaciones/Unidad 1/Marketing Analytics")
library(rsconnect)
install.packages(c("bslib", "cpp11", "curl", "fastmatch", "fontawesome", "gert", "ggplot2", "htmltools", "httr", "igraph", "leaflet.providers", "Matrix", "nonnest2", "patchwork", "promises", "purrr", "quantreg", "RcppArmadillo", "renv", "reticulate", "rmarkdown", "rsconnect", "sfsmisc", "shiny", "tinytex", "uuid", "xfun"))
install.packages(c("htmltools", "promises"))
